/* Generated By:JavaCC: Do not edit this line. PerlParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PerlParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int __DATA__ = 9;
  /** RegularExpression Id. */
  int __END__ = 10;
  /** RegularExpression Id. */
  int __FILE__ = 11;
  /** RegularExpression Id. */
  int __LINE__ = 12;
  /** RegularExpression Id. */
  int __PACKAGE__ = 13;
  /** RegularExpression Id. */
  int AND = 14;
  /** RegularExpression Id. */
  int SCMP = 15;
  /** RegularExpression Id. */
  int CONTINUE = 16;
  /** RegularExpression Id. */
  int CORE = 17;
  /** RegularExpression Id. */
  int DO = 18;
  /** RegularExpression Id. */
  int ELSE = 19;
  /** RegularExpression Id. */
  int ELSIF = 20;
  /** RegularExpression Id. */
  int SEQ = 21;
  /** RegularExpression Id. */
  int EXP = 22;
  /** RegularExpression Id. */
  int FOR = 23;
  /** RegularExpression Id. */
  int FOREACH = 24;
  /** RegularExpression Id. */
  int SGE = 25;
  /** RegularExpression Id. */
  int SGT = 26;
  /** RegularExpression Id. */
  int IF = 27;
  /** RegularExpression Id. */
  int SLE = 28;
  /** RegularExpression Id. */
  int LOCK = 29;
  /** RegularExpression Id. */
  int SLT = 30;
  /** RegularExpression Id. */
  int M = 31;
  /** RegularExpression Id. */
  int SNE = 32;
  /** RegularExpression Id. */
  int NO = 33;
  /** RegularExpression Id. */
  int OR = 34;
  /** RegularExpression Id. */
  int PACKAGE = 35;
  /** RegularExpression Id. */
  int Q = 36;
  /** RegularExpression Id. */
  int QQ = 37;
  /** RegularExpression Id. */
  int QR = 38;
  /** RegularExpression Id. */
  int QW = 39;
  /** RegularExpression Id. */
  int QX = 40;
  /** RegularExpression Id. */
  int SUB = 41;
  /** RegularExpression Id. */
  int TR = 42;
  /** RegularExpression Id. */
  int UNLESS = 43;
  /** RegularExpression Id. */
  int UNTIL = 44;
  /** RegularExpression Id. */
  int WHILE = 45;
  /** RegularExpression Id. */
  int XXOR = 46;
  /** RegularExpression Id. */
  int Y = 47;
  /** RegularExpression Id. */
  int MY = 48;
  /** RegularExpression Id. */
  int WHEN = 49;
  /** RegularExpression Id. */
  int GIVEN = 50;
  /** RegularExpression Id. */
  int RETURN = 51;
  /** RegularExpression Id. */
  int DEFAULT_ = 52;
  /** RegularExpression Id. */
  int EVAL = 53;
  /** RegularExpression Id. */
  int LOCAL = 54;
  /** RegularExpression Id. */
  int POD_DEC = 55;
  /** RegularExpression Id. */
  int HEAD1 = 56;
  /** RegularExpression Id. */
  int HEAD2 = 57;
  /** RegularExpression Id. */
  int HEAD3 = 58;
  /** RegularExpression Id. */
  int HEAD4 = 59;
  /** RegularExpression Id. */
  int OVER = 60;
  /** RegularExpression Id. */
  int ITEM = 61;
  /** RegularExpression Id. */
  int BEGIN = 62;
  /** RegularExpression Id. */
  int BACK = 63;
  /** RegularExpression Id. */
  int END = 64;
  /** RegularExpression Id. */
  int POD_FOR = 65;
  /** RegularExpression Id. */
  int ENCODING = 66;
  /** RegularExpression Id. */
  int CUT = 67;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 68;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 69;
  /** RegularExpression Id. */
  int BINARY_LITERAL = 70;
  /** RegularExpression Id. */
  int HEX_LITERAL = 71;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 72;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 73;
  /** RegularExpression Id. */
  int EXPONENT = 74;
  /** RegularExpression Id. */
  int STRING_LITERAL = 75;
  /** RegularExpression Id. */
  int DOUBLE_QUOTE_STRING = 76;
  /** RegularExpression Id. */
  int QQ_STRING = 77;
  /** RegularExpression Id. */
  int SINGLE_QUOTE_STRING = 78;
  /** RegularExpression Id. */
  int POD = 79;
  /** RegularExpression Id. */
  int Q_STRING = 80;
  /** RegularExpression Id. */
  int REGEX_LITERAL = 81;
  /** RegularExpression Id. */
  int CMD_LITERAL = 82;
  /** RegularExpression Id. */
  int IDENTIFIER = 83;
  /** RegularExpression Id. */
  int SCALAR_NAME = 84;
  /** RegularExpression Id. */
  int ARRAY_NAME = 85;
  /** RegularExpression Id. */
  int HASH_NAME = 86;
  /** RegularExpression Id. */
  int ONE_LETTER = 87;
  /** RegularExpression Id. */
  int LETTER = 88;
  /** RegularExpression Id. */
  int PART_LETTER = 89;
  /** RegularExpression Id. */
  int LPAREN = 90;
  /** RegularExpression Id. */
  int RPAREN = 91;
  /** RegularExpression Id. */
  int LBRACE = 92;
  /** RegularExpression Id. */
  int RBRACE = 93;
  /** RegularExpression Id. */
  int LBRACKET = 94;
  /** RegularExpression Id. */
  int RBRACKET = 95;
  /** RegularExpression Id. */
  int SEMICOLON = 96;
  /** RegularExpression Id. */
  int COMMA = 97;
  /** RegularExpression Id. */
  int ASSIGN = 98;
  /** RegularExpression Id. */
  int GT = 99;
  /** RegularExpression Id. */
  int LT = 100;
  /** RegularExpression Id. */
  int CMP = 101;
  /** RegularExpression Id. */
  int BANG = 102;
  /** RegularExpression Id. */
  int TILDE = 103;
  /** RegularExpression Id. */
  int HOOK = 104;
  /** RegularExpression Id. */
  int COLON = 105;
  /** RegularExpression Id. */
  int EQ = 106;
  /** RegularExpression Id. */
  int LE = 107;
  /** RegularExpression Id. */
  int GE = 108;
  /** RegularExpression Id. */
  int NE = 109;
  /** RegularExpression Id. */
  int SC_OR = 110;
  /** RegularExpression Id. */
  int SC_AND = 111;
  /** RegularExpression Id. */
  int INCR = 112;
  /** RegularExpression Id. */
  int DECR = 113;
  /** RegularExpression Id. */
  int PLUS = 114;
  /** RegularExpression Id. */
  int MINUS = 115;
  /** RegularExpression Id. */
  int STAR = 116;
  /** RegularExpression Id. */
  int POWER = 117;
  /** RegularExpression Id. */
  int BIT_AND = 118;
  /** RegularExpression Id. */
  int BIT_OR = 119;
  /** RegularExpression Id. */
  int XOR = 120;
  /** RegularExpression Id. */
  int REM = 121;
  /** RegularExpression Id. */
  int LSHIFT = 122;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 123;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 124;
  /** RegularExpression Id. */
  int PLUSASSIGN = 125;
  /** RegularExpression Id. */
  int MINUSASSIGN = 126;
  /** RegularExpression Id. */
  int STARASSIGN = 127;
  /** RegularExpression Id. */
  int SLASHASSIGN = 128;
  /** RegularExpression Id. */
  int ANDASSIGN = 129;
  /** RegularExpression Id. */
  int ORASSIGN = 130;
  /** RegularExpression Id. */
  int XORASSIGN = 131;
  /** RegularExpression Id. */
  int NOTASSIGN = 132;
  /** RegularExpression Id. */
  int REMASSIGN = 133;
  /** RegularExpression Id. */
  int POWASSIGN = 134;
  /** RegularExpression Id. */
  int CONCATASSIGN = 135;
  /** RegularExpression Id. */
  int REPEATASSIGN = 136;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 137;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 138;
  /** RegularExpression Id. */
  int CONCAT = 139;
  /** RegularExpression Id. */
  int DOUBLE_ARROW = 140;
  /** RegularExpression Id. */
  int REPEAT = 141;
  /** RegularExpression Id. */
  int TEMPLATE_CMP = 142;
  /** RegularExpression Id. */
  int TEMPLATE_NOT_CMP = 143;
  /** RegularExpression Id. */
  int SCALAR = 144;
  /** RegularExpression Id. */
  int ARRAY = 145;
  /** RegularExpression Id. */
  int REFERENCE = 146;
  /** RegularExpression Id. */
  int PATH = 147;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"#\"",
    "<SINGLE_LINE_COMMENT>",
    "<token of kind 8>",
    "\"__DATA__\"",
    "\"__END__\"",
    "\"__FILE__\"",
    "\"__LINE__\"",
    "\"__PACKAGE__\"",
    "\"and\"",
    "\"cmp\"",
    "\"continue\"",
    "\"CORE\"",
    "\"do\"",
    "\"else\"",
    "\"elsif\"",
    "\"eq\"",
    "\"exp\"",
    "\"for\"",
    "\"foreach\"",
    "\"ge\"",
    "\"gt\"",
    "\"if\"",
    "\"le\"",
    "\"lock\"",
    "\"lt\"",
    "\"m\"",
    "\"ne\"",
    "\"no\"",
    "\"or\"",
    "\"package\"",
    "\"q\"",
    "\"qq\"",
    "\"qr\"",
    "\"qw\"",
    "\"qx\"",
    "\"sub\"",
    "\"tr\"",
    "\"unless\"",
    "\"until\"",
    "\"while\"",
    "\"xor\"",
    "\"y\"",
    "\"my\"",
    "\"when\"",
    "\"given\"",
    "\"return\"",
    "\"default\"",
    "\"eval\"",
    "\"local\"",
    "\"=pod\"",
    "\"=head1\"",
    "\"=head2\"",
    "\"=head3\"",
    "\"=head4\"",
    "\"=over\"",
    "\"=item\"",
    "\"=begin\"",
    "\"=back\"",
    "\"=end\"",
    "\"=for\"",
    "\"=encoding\"",
    "\"=cut\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<BINARY_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<DOUBLE_QUOTE_STRING>",
    "<QQ_STRING>",
    "<SINGLE_QUOTE_STRING>",
    "<POD>",
    "<Q_STRING>",
    "<REGEX_LITERAL>",
    "<CMD_LITERAL>",
    "<IDENTIFIER>",
    "<SCALAR_NAME>",
    "<ARRAY_NAME>",
    "<HASH_NAME>",
    "<ONE_LETTER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"<=>\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"**\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"~=\"",
    "\"%=\"",
    "\"**=\"",
    "\".=\"",
    "\"x=\"",
    "\"<<=\"",
    "\">>=\"",
    "\".\"",
    "\"=>\"",
    "\"x\"",
    "\"=~\"",
    "\"!~\"",
    "\"$\"",
    "\"@\"",
    "\"\\\\\"",
    "<PATH>",
    "\"/\"",
    "\"::\"",
  };

}
